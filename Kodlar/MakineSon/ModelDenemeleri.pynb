{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"twlkD_P1NZ0c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716872154886,"user_tz":-180,"elapsed":18617,"user":{"displayName":"MEVLÜTCAN MERCAN","userId":"12743376458783703885"}},"outputId":"94217950-0174-4fa5-91a3-24072bfdfdec"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')\n"]},{"cell_type":"code","source":["import os\n","os.chdir('/content/drive/My Drive/MakineSon')\n","!pwd"],"metadata":{"id":"q2DCwqgRNg23","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716872154886,"user_tz":-180,"elapsed":5,"user":{"displayName":"MEVLÜTCAN MERCAN","userId":"12743376458783703885"}},"outputId":"39ddbc50-c6d5-4d33-f16d-f6ab16d17407"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/MakineSon\n"]}]},{"cell_type":"code","source":["!pip install xgboost\n"],"metadata":{"id":"utji1ywtNocL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716872163437,"user_tz":-180,"elapsed":8554,"user":{"displayName":"MEVLÜTCAN MERCAN","userId":"12743376458783703885"}},"outputId":"60c092f7-05d6-44bc-e28c-224dc88aa117"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.11.4)\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import xgboost as xgb\n","from sklearn.metrics import r2_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.linear_model import LinearRegression\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.neural_network import MLPRegressor\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.svm import SVR\n","from xgboost import XGBRegressor"],"metadata":{"id":"4yMEcSGrNwhX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from warnings import filterwarnings\n","filterwarnings(\"ignore\")"],"metadata":{"id":"BtjaXM42N0IC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_2 = pd.read_csv(r\"istanbulson2.csv\")  # 'istanbulson2.csv' adlı CSV dosyasını oku ve df_2 adlı DataFrame'e yükle\n","df = df_2.copy()  # df_2'nin bir kopyasını oluştur ve df adlı yeni bir DataFrame'e ata"],"metadata":{"id":"ajBhb-vIN1gD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = df.drop([\"fiyat\"], axis=1)  # 'fiyat' sütununu df DataFrame'inden çıkar ve geriye kalan sütunları X adlı değişkene ata\n","y = df[\"fiyat\"]  # 'fiyat' sütununu df DataFrame'inden al ve y adlı değişkene ata\n"],"metadata":{"id":"5o2RwI-GN42P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def compML(df, target, alg, params=None):\n","    # Veriyi hedef değişken ve özellikler olmak üzere ayır\n","    y = df[target].values\n","    X = df.drop([target], axis=1)\n","\n","    # Veriyi MinMaxScaler ile ölçeklendir\n","    scaler = MinMaxScaler()\n","    X = scaler.fit_transform(X)\n","\n","    # Eğitim ve test setlerine ayır\n","    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=144, shuffle=True)\n","\n","    if params:\n","        # Eğer hiperparametreler belirtilmişse, GridSearchCV kullanarak en iyi parametreleri bul\n","        grid_search = GridSearchCV(alg(), param_grid=params, cv=5, scoring='r2')\n","        grid_search.fit(x_train, y_train)\n","        model = grid_search.best_estimator_  # En iyi modeli seç\n","        print(f\"Best params for {alg.__name__}: {grid_search.best_params_}\")  # En iyi parametreleri yazdır\n","    else:\n","        # Hiperparametreler belirtilmemişse, algoritmayı varsayılan parametrelerle eğit\n","        model = alg().fit(x_train, y_train)\n","\n","    # Modeli kullanarak tahmin yap\n","    y_pred = model.predict(x_test)\n","    r2 = r2_score(y_test, y_pred)  # R2 skorunu hesapla\n","    print(alg.__name__, \"R2_Score ---> \", r2)  # Modelin adı ve R2 skorunu yazdır\n","\n","# Modellerin listesini güncelle ve örnek hiperparametreler tanımla\n","models = [LinearRegression, DecisionTreeRegressor, KNeighborsRegressor, MLPRegressor, RandomForestRegressor, GradientBoostingRegressor, SVR, XGBRegressor]\n","xgb_params = {\n","    \"colsample_bytree\":[0.4,0.5,0.6],\n","    \"learning_rate\":[0.01,0.02,0.09],\n","    \"max_depth\":[2,3,4,5,6],\n","    \"n_estimators\":[100,200,500,2000]\n","}\n","\n","# Her model için compML fonksiyonunu çağırarak performansı karşılaştır\n","for i in models:\n","    if i == XGBRegressor:\n","        compML(df, \"fiyat\", i, params=xgb_params)  # XGBRegressor için özel hiperparametrelerle çağır\n","    else:\n","        compML(df, \"fiyat\", i)  # Diğer modeller için varsayılan hiperparametrelerle çağır\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hipogbvfDepz","executionInfo":{"status":"ok","timestamp":1716877693257,"user_tz":-180,"elapsed":1111754,"user":{"displayName":"MEVLÜTCAN MERCAN","userId":"12743376458783703885"}},"outputId":"a190945c-9084-4490-f327-d9fcaa994b76"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["LinearRegression R2_Score --->  0.2218286063548226\n","DecisionTreeRegressor R2_Score --->  0.5618488882410941\n","KNeighborsRegressor R2_Score --->  0.19555939129932143\n","MLPRegressor R2_Score --->  -0.16517364925136846\n","RandomForestRegressor R2_Score --->  0.6289478170406062\n","GradientBoostingRegressor R2_Score --->  0.5804784999071992\n","SVR R2_Score --->  -0.04243695262698788\n","Best params for XGBRegressor: {'colsample_bytree': 0.5, 'learning_rate': 0.02, 'max_depth': 6, 'n_estimators': 2000}\n","XGBRegressor R2_Score --->  0.6573498390926505\n"]}]}]}